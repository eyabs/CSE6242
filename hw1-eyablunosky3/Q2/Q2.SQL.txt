-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS movies;
DROP TABLE IF EXISTS cast;
DROP VIEW IF EXISTS good_collaboration;
DROP TABLE IF EXISTS movie_overview;

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE movies (
     id INTEGER PRIMARY KEY
    ,name TEXT
    ,score INTEGER 
);

CREATE TABLE cast (
     movie_id INTEGER NOT NULL
    ,cast_id INTEGER NOT NULL
    ,cast_name TEXT
    ,FOREIGN KEY (movie_id) REFERENCES movies (id) 
);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.mode csv movies
.import ./movie-name-score.txt movies

.mode csv cast
.import ./movie-cast.txt cast

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
SELECT COUNT(*) FROM movies;
SELECT COUNT(*) FROM cast;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX scores_index 
ON movies(score);

CREATE INDEX cast_index 
ON cast(cast_id);

CREATE INDEX movie_index 
ON movies(id);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c) Calculate average score

-- [insert your SQL statement(s) BELOW this line]

SELECT
    AVG(mov.score)      AS [average_score]
FROM
    movies mov
WHERE
    mov.score > 5
;
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Find poor movies

-- [insert your SQL statement(s) BELOW this line]

SELECT
     mov.id     AS [id]
    ,mov.name   AS [name]
    ,mov.score  AS [score]
FROM
    movies mov
ORDER BY
    mov.score ASC, mov.name
LIMIT 5
;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Find laid back actors

-- [insert your SQL statement(s) BELOW this line]

SELECT
     cst.cast_id        AS [cast_id]
    ,cst.cast_name      AS [cast_name]
    ,COUNT(*)           AS [movie_count]
FROM
    cast cst
GROUP BY
    cst.cast_id, cst.cast_name
HAVING 
    COUNT(*) = 2
ORDER BY
    cst.cast_name
LIMIT 10
;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Get high scoring actors

-- [insert your SQL statement(s) BELOW this line]


SELECT
     cst.cast_id        AS [cast_id]
    ,cst.cast_name      AS [cast_name]
    ,AVG(mov.score)     AS [average_score]
FROM
    cast cst
INNER JOIN
    movies mov
    ON cst.movie_id = mov.id
WHERE
    mov.score >= 40
GROUP BY
    cst.cast_id, cst.cast_name
HAVING 
    COUNT(*) <= 2
ORDER BY
    AVG(mov.score) DESC, cst.cast_name
LIMIT 10
;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g) Creating views

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW good_collaboration AS
    SELECT
         cst1.cast_id   AS [cast_member_id1]
        ,cst2.cast_id   AS [cast_member_id2]
        ,COUNT(*)       AS [movie_count]
        ,AVG(mov.score) AS [average_movie_score]
    FROM
        cast cst1
    INNER JOIN
        cast cst2
        ON cst1.movie_id = cst2.movie_id 
        AND cst1.cast_id != cst2.cast_id
    INNER JOIN
        movies mov
        ON cst1.movie_id = mov.id
    WHERE
        cst1.cast_id < cst2.cast_id
    GROUP BY 
        cst1.cast_id, cst2.cast_id
        ,cst1.cast_name, cst2.cast_name
    HAVING 
        COUNT(*) >= 3 
        AND AVG(mov.score) >= 50
;
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.headers off
PRAGMA table_info(good_collaboration);
SELECT AVG(average_movie_score) FROM good_collaboration;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Find the best collaborators

-- [insert your SQL statement(s) BELOW this line]

WITH all_collaborators AS (
    SELECT
         gc.cast_member_id1     AS [cast_id]
        ,cst.cast_name          AS [cast_name]
        ,gc.average_movie_score AS [average_movie_score]

    FROM
        good_collaboration gc
    INNER JOIN
        cast cst on gc.cast_member_id1 = cst.cast_id
    UNION
        SELECT
         gc.cast_member_id2     AS [cast_id]
        ,cst.cast_name          AS [cast_name]
        ,gc.average_movie_score AS [average_movie_score]

    FROM
        good_collaboration gc
    INNER JOIN
        cast cst on gc.cast_member_id2 = cst.cast_id
), collaboration_scores AS (
    SELECT
        ac.cast_id                  AS [cast_id]
       ,ac.cast_name                AS [cast_name]
       ,AVG(average_movie_score)    AS [collaboration_score]
    FROM 
        all_collaborators ac
    GROUP BY
        ac.cast_id, ac.cast_name
)
SELECT * 
FROM collaboration_scores
ORDER BY collaboration_score DESC, cast_name
LIMIT 5
;
-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i) Create FTS table and import data

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE movie_overview USING fts3(
    id integer,
    name text,
    year integer,
    overview text,
    popularity decimal
);

.mode csv movie_overview
.import movie-overview.txt movie_overview

-- [insert your SQL statement(s) ABOVE this line]

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.1) Count movies with "fight"

-- [insert your SQL statement(s) BELOW this line]

SELECT
    COUNT(*)    AS [count_overview]
FROM
    movie_overview
WHERE
    overview MATCH 'fight'
;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (i.2) List movies with "love" and "story" nearby

-- [insert your SQL statement(s) BELOW this line]

SELECT
    id    AS [id]
FROM
    movie_overview
WHERE
    overview MATCH 'love NEAR/5 story'
;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --